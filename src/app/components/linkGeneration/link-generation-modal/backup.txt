<app-searchbar
  [placeholder]="'Search names...'"
  (searchQueryChange)="onSearchQueryChange($event)"
  [class]="
    'mb-1 px-3 py-1 border border-gray-300 rounded-lg shadow-md w-full focus:outline-none focus:ring-2 focus:ring-indigo-300 focus:border-indigo-500'
  "
>
</app-searchbar>

<div class="flex justify-between items-center my-2">
  <div class="flex items-center">
    <input
      type="checkbox"
      id="selectAll"
      [(ngModel)]="selectAll"
      (change)="toggleSelectAll()"
      class="mr-1 text-blue-600 focus:ring-2 focus:ring-blue-500"
    />
    <label for="selectAll" class="text-xs font-medium text-gray-700"
      >Select All</label
    >
  </div>
  <div class="text-xs text-gray-500">({{ filteredNames.length }} items)</div>
</div>

<div
  class="max-h-40 overflow-y-auto mb-2 p-3 bg-gray-50 rounded-lg shadow-lg border border-gray-200"
>
  <ul class="space-y-2">
    @if(filteredNames.length > 0) { @for(person of filteredNames; track
    person.id) {
    <li class="flex items-center">
      <input
        type="checkbox"
        id="person-{{ person.id }}"
        [(ngModel)]="person.selected"
        (change)="toggleSelection(person)"
        class="mr-1 text-blue-600 focus:ring-2 focus:ring-blue-500"
      />
      <label for="person-{{ person.id }}" class="text-xs text-gray-800">{{
        person.name
      }}</label>
    </li>
    } } @else {
    <div class="p-1 text-center text-gray-500">User Not Found</div>
    }
  </ul>
</div>

@if(selectedNames.length > 0) {
<div
  class="max-h-40 overflow-y-auto mt-2 p-2 bg-gradient-to-r from-indigo-50 to-blue-50 rounded-xl shadow-lg border border-gray-300"
>
  <p class="text-sm font-semibold mb-2 text-gray-800">
    Selected {{ assessmentType === "internal" ? "Employees" : "Candidates" }}
  </p>
  <div class="flex flex-wrap gap-2">
    @for(name of selectedNames; track name.id) {
    <div class="flex items-center bg-indigo-100 px-2 py-1 rounded-md">
      <span class="text-sm font-medium text-gray-800">{{ name.name }}</span>
      <button
        type="button"
        (click)="removeSelectedName(name)"
        class="ml-1 text-red-500 font-bold hover:text-red-700 focus:outline-none transition-all duration-200 ease-in-out"
      >
        &times;
      </button>
    </div>
    }
  </div>
</div>
}

<div class="flex justify-between items-center mt-4 space-x-2">
  <input
    type="date"
    [(ngModel)]="expiryDate"
    (change)="onExpiryDateChange($event)"
    class="p-2 border border-gray-300 rounded-md shadow-sm w-full sm:w-auto bg-white text-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500"
  />
  <app-button
    [label]="'Send'"
    [colorClass]="
      'px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none'
    "
    (click)="onSend()"
  ></app-button>
</div>


import {
  Component,
  EventEmitter,
  Input,
  Output,
  OnInit,
  OnChanges,
  SimpleChanges,
} from '@angular/core';
import { CommonModule } from '@angular/common';
import employeesData from '../../../assets/employees.json';
import candidatesData from '../../../assets/candidates.json';
import { FormsModule } from '@angular/forms';
import { SearchbarComponent } from '../../common/searchbar/searchbar.component';
import { ButtonComponent } from '../../common/button/button.component';

@Component({
  selector: 'app-modal',
  standalone: true,
  imports: [CommonModule, SearchbarComponent, FormsModule, ButtonComponent],
  templateUrl: './modal.component.html',
  styleUrls: ['./modal.component.css'],
})
export class ModalComponent implements OnInit, OnChanges {
  @Input() link: string = '';
  @Input() isVisible: boolean = false;
  @Input() assessmentType: 'internal' | 'external' = 'external';
  @Output() closeModalEvent = new EventEmitter<void>();

  employees: any[] = [];
  candidates: any[] = [];
  filteredNames: any[] = [];
  selectedNames: any[] = [];
  searchQuery: string = '';
  selectAll: boolean = false;
  expiryDate: string = '';

  ngOnInit(): void {
    this.loadData();
  }

  ngOnChanges(changes: SimpleChanges): void {
    if (changes['assessmentType']) {
      this.loadData();
    }

    if (changes['searchQuery']) {
      this.filterNames();
    }
  }

  loadData(): void {
    if (this.assessmentType === 'internal') {
      this.employees = employeesData;
      this.filteredNames = [...this.employees];
    } else {
      this.candidates = candidatesData;
      this.filteredNames = [...this.candidates];
    }

    this.filterNames();
  }

  filterNames(): void {
    if (this.assessmentType === 'external') {
      this.filteredNames = this.candidates.filter((item) =>
        item.name.toLowerCase().includes(this.searchQuery.toLowerCase())
      );
    } else {
      this.filteredNames = this.employees.filter((item) =>
        item.name.toLowerCase().includes(this.searchQuery.toLowerCase())
      );
    }

    this.updateSelectAllState();
  }

  toggleSelection(name: any): void {
    const index = this.selectedNames.indexOf(name);

    if (index === -1) {
      this.selectedNames.push(name);
    } else {
      this.selectedNames.splice(index, 1);
    }

    this.updateSelectAllState();
  }

  toggleSelectAll(): void {
    if (this.selectAll) {
      this.selectedNames = [...this.filteredNames];
      this.filteredNames.forEach((name) => {
        name.selected = true;
      });
    } else {
      this.selectedNames = [];
      this.filteredNames.forEach((name) => {
        name.selected = false;
      });
    }
  }

  updateSelectAllState(): void {
    this.selectAll = this.selectedNames.length === this.filteredNames.length;
  }

  closeModal(): void {
    this.resetSelectionData();
    this.closeModalEvent.emit();
  }

  onSearchQueryChange(query: string): void {
    this.searchQuery = query;
    this.filterNames();
  }

  removeSelectedName(name: any): void {
    const index = this.selectedNames.indexOf(name);
    if (index !== -1) {
      this.selectedNames.splice(index, 1);
    }
    const personIndex = this.filteredNames.findIndex(
      (person) => person.id === name.id
    );
    if (personIndex !== -1) {
      this.filteredNames[personIndex].selected = false;
    }
    this.updateSelectAllState();
  }

  onExpiryDateChange(event: any): void {
    this.expiryDate = event.target.value;
  }

  onSend(): void {
    console.log('Sending data:', {
      selectedNames: this.selectedNames,
      expiryDate: this.expiryDate,
      link: this.link,
    });

    this.resetSelectionData();
    this.closeModal();
  }

  resetSelectionData(): void {
    this.selectedNames = [];
    this.selectAll = false;
    this.filteredNames.forEach((name) => (name.selected = false));
    this.expiryDate = '';
  }
}
